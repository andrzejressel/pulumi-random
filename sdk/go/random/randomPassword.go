// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package random

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > **Note:** Requires random provider version >= 2.2.0
// 
// Identical to .RandomString with the exception that the
// result is treated as sensitive and, thus, _not_ displayed in console output.
// 
// > **Note:** All attributes including the generated password will be stored in
// the raw state as plain-text. [Read more about sensitive data in
// state](https://www.terraform.io/docs/state/sensitive-data.html).
// 
// This resource *does* use a cryptographic random number generator.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/password.html.markdown.
type RandomPassword struct {
	pulumi.CustomResourceState

	Keepers pulumi.MapOutput `pulumi:"keepers"`

	Length pulumi.IntOutput `pulumi:"length"`

	Lower pulumi.BoolOutput `pulumi:"lower"`

	MinLower pulumi.IntOutput `pulumi:"minLower"`

	MinNumeric pulumi.IntOutput `pulumi:"minNumeric"`

	MinSpecial pulumi.IntOutput `pulumi:"minSpecial"`

	MinUpper pulumi.IntOutput `pulumi:"minUpper"`

	Number pulumi.BoolOutput `pulumi:"number"`

	OverrideSpecial pulumi.StringOutput `pulumi:"overrideSpecial"`

	Result pulumi.StringOutput `pulumi:"result"`

	Special pulumi.BoolOutput `pulumi:"special"`

	Upper pulumi.BoolOutput `pulumi:"upper"`
}

// NewRandomPassword registers a new resource with the given unique name, arguments, and options.
func NewRandomPassword(ctx *pulumi.Context,
	name string, args *RandomPasswordArgs, opts ...pulumi.ResourceOption) (*RandomPassword, error) {
	if args == nil || args.Length == nil {
		return nil, errors.New("missing required argument 'Length'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := args.Length; i != nil { inputs["length"] = i.ToIntOutput() }
		if i := args.Lower; i != nil { inputs["lower"] = i.ToBoolOutput() }
		if i := args.MinLower; i != nil { inputs["minLower"] = i.ToIntOutput() }
		if i := args.MinNumeric; i != nil { inputs["minNumeric"] = i.ToIntOutput() }
		if i := args.MinSpecial; i != nil { inputs["minSpecial"] = i.ToIntOutput() }
		if i := args.MinUpper; i != nil { inputs["minUpper"] = i.ToIntOutput() }
		if i := args.Number; i != nil { inputs["number"] = i.ToBoolOutput() }
		if i := args.OverrideSpecial; i != nil { inputs["overrideSpecial"] = i.ToStringOutput() }
		if i := args.Special; i != nil { inputs["special"] = i.ToBoolOutput() }
		if i := args.Upper; i != nil { inputs["upper"] = i.ToBoolOutput() }
	}
	var resource RandomPassword
	err := ctx.RegisterResource("random:index/randomPassword:RandomPassword", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRandomPassword gets an existing RandomPassword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomPassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RandomPasswordState, opts ...pulumi.ResourceOption) (*RandomPassword, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := state.Length; i != nil { inputs["length"] = i.ToIntOutput() }
		if i := state.Lower; i != nil { inputs["lower"] = i.ToBoolOutput() }
		if i := state.MinLower; i != nil { inputs["minLower"] = i.ToIntOutput() }
		if i := state.MinNumeric; i != nil { inputs["minNumeric"] = i.ToIntOutput() }
		if i := state.MinSpecial; i != nil { inputs["minSpecial"] = i.ToIntOutput() }
		if i := state.MinUpper; i != nil { inputs["minUpper"] = i.ToIntOutput() }
		if i := state.Number; i != nil { inputs["number"] = i.ToBoolOutput() }
		if i := state.OverrideSpecial; i != nil { inputs["overrideSpecial"] = i.ToStringOutput() }
		if i := state.Result; i != nil { inputs["result"] = i.ToStringOutput() }
		if i := state.Special; i != nil { inputs["special"] = i.ToBoolOutput() }
		if i := state.Upper; i != nil { inputs["upper"] = i.ToBoolOutput() }
	}
	var resource RandomPassword
	err := ctx.ReadResource("random:index/randomPassword:RandomPassword", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RandomPassword resources.
type RandomPasswordState struct {
	Keepers pulumi.MapInput `pulumi:"keepers"`
	Length pulumi.IntInput `pulumi:"length"`
	Lower pulumi.BoolInput `pulumi:"lower"`
	MinLower pulumi.IntInput `pulumi:"minLower"`
	MinNumeric pulumi.IntInput `pulumi:"minNumeric"`
	MinSpecial pulumi.IntInput `pulumi:"minSpecial"`
	MinUpper pulumi.IntInput `pulumi:"minUpper"`
	Number pulumi.BoolInput `pulumi:"number"`
	OverrideSpecial pulumi.StringInput `pulumi:"overrideSpecial"`
	Result pulumi.StringInput `pulumi:"result"`
	Special pulumi.BoolInput `pulumi:"special"`
	Upper pulumi.BoolInput `pulumi:"upper"`
}

// The set of arguments for constructing a RandomPassword resource.
type RandomPasswordArgs struct {
	Keepers pulumi.MapInput `pulumi:"keepers"`
	Length pulumi.IntInput `pulumi:"length"`
	Lower pulumi.BoolInput `pulumi:"lower"`
	MinLower pulumi.IntInput `pulumi:"minLower"`
	MinNumeric pulumi.IntInput `pulumi:"minNumeric"`
	MinSpecial pulumi.IntInput `pulumi:"minSpecial"`
	MinUpper pulumi.IntInput `pulumi:"minUpper"`
	Number pulumi.BoolInput `pulumi:"number"`
	OverrideSpecial pulumi.StringInput `pulumi:"overrideSpecial"`
	Special pulumi.BoolInput `pulumi:"special"`
	Upper pulumi.BoolInput `pulumi:"upper"`
}
