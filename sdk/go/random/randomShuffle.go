// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package random

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The resource `.RandomShuffle` generates a random permutation of a list
// of strings given as an argument.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/shuffle.html.markdown.
type RandomShuffle struct {
	pulumi.CustomResourceState

	// The list of strings to shuffle.
	Inputs pulumi.StringArrayOutput `pulumi:"inputs"`

	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapOutput `pulumi:"keepers"`

	// Random permutation of the list of strings given in `input`.
	Results pulumi.StringArrayOutput `pulumi:"results"`

	// The number of results to return. Defaults to
	// the number of items in the `input` list. If fewer items are requested,
	// some elements will be excluded from the result. If more items are requested,
	// items will be repeated in the result but not more frequently than the number
	// of items in the input list.
	ResultCount pulumi.IntOutput `pulumi:"resultCount"`

	Seed pulumi.StringOutput `pulumi:"seed"`
}

// NewRandomShuffle registers a new resource with the given unique name, arguments, and options.
func NewRandomShuffle(ctx *pulumi.Context,
	name string, args *RandomShuffleArgs, opts ...pulumi.ResourceOption) (*RandomShuffle, error) {
	if args == nil || args.Inputs == nil {
		return nil, errors.New("missing required argument 'Inputs'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Inputs; i != nil { inputs["inputs"] = i.ToStringArrayOutput() }
		if i := args.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := args.ResultCount; i != nil { inputs["resultCount"] = i.ToIntOutput() }
		if i := args.Seed; i != nil { inputs["seed"] = i.ToStringOutput() }
	}
	var resource RandomShuffle
	err := ctx.RegisterResource("random:index/randomShuffle:RandomShuffle", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRandomShuffle gets an existing RandomShuffle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomShuffle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RandomShuffleState, opts ...pulumi.ResourceOption) (*RandomShuffle, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Inputs; i != nil { inputs["inputs"] = i.ToStringArrayOutput() }
		if i := state.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := state.Results; i != nil { inputs["results"] = i.ToStringArrayOutput() }
		if i := state.ResultCount; i != nil { inputs["resultCount"] = i.ToIntOutput() }
		if i := state.Seed; i != nil { inputs["seed"] = i.ToStringOutput() }
	}
	var resource RandomShuffle
	err := ctx.ReadResource("random:index/randomShuffle:RandomShuffle", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RandomShuffle resources.
type RandomShuffleState struct {
	// The list of strings to shuffle.
	Inputs pulumi.StringArrayInput `pulumi:"inputs"`
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapInput `pulumi:"keepers"`
	// Random permutation of the list of strings given in `input`.
	Results pulumi.StringArrayInput `pulumi:"results"`
	// The number of results to return. Defaults to
	// the number of items in the `input` list. If fewer items are requested,
	// some elements will be excluded from the result. If more items are requested,
	// items will be repeated in the result but not more frequently than the number
	// of items in the input list.
	ResultCount pulumi.IntInput `pulumi:"resultCount"`
	Seed pulumi.StringInput `pulumi:"seed"`
}

// The set of arguments for constructing a RandomShuffle resource.
type RandomShuffleArgs struct {
	// The list of strings to shuffle.
	Inputs pulumi.StringArrayInput `pulumi:"inputs"`
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapInput `pulumi:"keepers"`
	// The number of results to return. Defaults to
	// the number of items in the `input` list. If fewer items are requested,
	// some elements will be excluded from the result. If more items are requested,
	// items will be repeated in the result but not more frequently than the number
	// of items in the input list.
	ResultCount pulumi.IntInput `pulumi:"resultCount"`
	Seed pulumi.StringInput `pulumi:"seed"`
}
