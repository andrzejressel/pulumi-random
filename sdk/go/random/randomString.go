// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package random

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The resource `.RandomString` generates a random permutation of alphanumeric
// characters and optionally special characters.
// 
// This resource *does* use a cryptographic random number generator.
// 
// Historically this resource's intended usage has been ambiguous as the original example
// used it in a password. For backwards compatibility it will
// continue to exist. For unique ids please use random_id, for sensitive
// random values please use random_password.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/string.html.markdown.
type RandomString struct {
	pulumi.CustomResourceState

	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapOutput `pulumi:"keepers"`

	// The length of the string desired
	Length pulumi.IntOutput `pulumi:"length"`

	// (default true) Include lowercase alphabet characters
	// in random string.
	Lower pulumi.BoolOutput `pulumi:"lower"`

	// (default 0) Minimum number of lowercase alphabet
	// characters in random string.
	MinLower pulumi.IntOutput `pulumi:"minLower"`

	// (default 0) Minimum number of numeric characters
	// in random string.
	MinNumeric pulumi.IntOutput `pulumi:"minNumeric"`

	// (default 0) Minimum number of special characters
	// in random string.
	MinSpecial pulumi.IntOutput `pulumi:"minSpecial"`

	// (default 0) Minimum number of uppercase alphabet
	// characters in random string.
	MinUpper pulumi.IntOutput `pulumi:"minUpper"`

	// (default true) Include numeric characters in random
	// string.
	Number pulumi.BoolOutput `pulumi:"number"`

	// Supply your own list of special characters to
	// use for string generation.  This overrides the default character list in the special
	// argument.  The special argument must still be set to true for any overwritten
	// characters to be used in generation.
	OverrideSpecial pulumi.StringOutput `pulumi:"overrideSpecial"`

	// Random string generated.
	Result pulumi.StringOutput `pulumi:"result"`

	// (default true) Include special characters in random
	// string. These are `!@#$%&*()-_=+[]{}<>:?`
	Special pulumi.BoolOutput `pulumi:"special"`

	// (default true) Include uppercase alphabet characters
	// in random string.
	Upper pulumi.BoolOutput `pulumi:"upper"`
}

// NewRandomString registers a new resource with the given unique name, arguments, and options.
func NewRandomString(ctx *pulumi.Context,
	name string, args *RandomStringArgs, opts ...pulumi.ResourceOption) (*RandomString, error) {
	if args == nil || args.Length == nil {
		return nil, errors.New("missing required argument 'Length'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := args.Length; i != nil { inputs["length"] = i.ToIntOutput() }
		if i := args.Lower; i != nil { inputs["lower"] = i.ToBoolOutput() }
		if i := args.MinLower; i != nil { inputs["minLower"] = i.ToIntOutput() }
		if i := args.MinNumeric; i != nil { inputs["minNumeric"] = i.ToIntOutput() }
		if i := args.MinSpecial; i != nil { inputs["minSpecial"] = i.ToIntOutput() }
		if i := args.MinUpper; i != nil { inputs["minUpper"] = i.ToIntOutput() }
		if i := args.Number; i != nil { inputs["number"] = i.ToBoolOutput() }
		if i := args.OverrideSpecial; i != nil { inputs["overrideSpecial"] = i.ToStringOutput() }
		if i := args.Special; i != nil { inputs["special"] = i.ToBoolOutput() }
		if i := args.Upper; i != nil { inputs["upper"] = i.ToBoolOutput() }
	}
	var resource RandomString
	err := ctx.RegisterResource("random:index/randomString:RandomString", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRandomString gets an existing RandomString resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomString(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RandomStringState, opts ...pulumi.ResourceOption) (*RandomString, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := state.Length; i != nil { inputs["length"] = i.ToIntOutput() }
		if i := state.Lower; i != nil { inputs["lower"] = i.ToBoolOutput() }
		if i := state.MinLower; i != nil { inputs["minLower"] = i.ToIntOutput() }
		if i := state.MinNumeric; i != nil { inputs["minNumeric"] = i.ToIntOutput() }
		if i := state.MinSpecial; i != nil { inputs["minSpecial"] = i.ToIntOutput() }
		if i := state.MinUpper; i != nil { inputs["minUpper"] = i.ToIntOutput() }
		if i := state.Number; i != nil { inputs["number"] = i.ToBoolOutput() }
		if i := state.OverrideSpecial; i != nil { inputs["overrideSpecial"] = i.ToStringOutput() }
		if i := state.Result; i != nil { inputs["result"] = i.ToStringOutput() }
		if i := state.Special; i != nil { inputs["special"] = i.ToBoolOutput() }
		if i := state.Upper; i != nil { inputs["upper"] = i.ToBoolOutput() }
	}
	var resource RandomString
	err := ctx.ReadResource("random:index/randomString:RandomString", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RandomString resources.
type RandomStringState struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapInput `pulumi:"keepers"`
	// The length of the string desired
	Length pulumi.IntInput `pulumi:"length"`
	// (default true) Include lowercase alphabet characters
	// in random string.
	Lower pulumi.BoolInput `pulumi:"lower"`
	// (default 0) Minimum number of lowercase alphabet
	// characters in random string.
	MinLower pulumi.IntInput `pulumi:"minLower"`
	// (default 0) Minimum number of numeric characters
	// in random string.
	MinNumeric pulumi.IntInput `pulumi:"minNumeric"`
	// (default 0) Minimum number of special characters
	// in random string.
	MinSpecial pulumi.IntInput `pulumi:"minSpecial"`
	// (default 0) Minimum number of uppercase alphabet
	// characters in random string.
	MinUpper pulumi.IntInput `pulumi:"minUpper"`
	// (default true) Include numeric characters in random
	// string.
	Number pulumi.BoolInput `pulumi:"number"`
	// Supply your own list of special characters to
	// use for string generation.  This overrides the default character list in the special
	// argument.  The special argument must still be set to true for any overwritten
	// characters to be used in generation.
	OverrideSpecial pulumi.StringInput `pulumi:"overrideSpecial"`
	// Random string generated.
	Result pulumi.StringInput `pulumi:"result"`
	// (default true) Include special characters in random
	// string. These are `!@#$%&*()-_=+[]{}<>:?`
	Special pulumi.BoolInput `pulumi:"special"`
	// (default true) Include uppercase alphabet characters
	// in random string.
	Upper pulumi.BoolInput `pulumi:"upper"`
}

// The set of arguments for constructing a RandomString resource.
type RandomStringArgs struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapInput `pulumi:"keepers"`
	// The length of the string desired
	Length pulumi.IntInput `pulumi:"length"`
	// (default true) Include lowercase alphabet characters
	// in random string.
	Lower pulumi.BoolInput `pulumi:"lower"`
	// (default 0) Minimum number of lowercase alphabet
	// characters in random string.
	MinLower pulumi.IntInput `pulumi:"minLower"`
	// (default 0) Minimum number of numeric characters
	// in random string.
	MinNumeric pulumi.IntInput `pulumi:"minNumeric"`
	// (default 0) Minimum number of special characters
	// in random string.
	MinSpecial pulumi.IntInput `pulumi:"minSpecial"`
	// (default 0) Minimum number of uppercase alphabet
	// characters in random string.
	MinUpper pulumi.IntInput `pulumi:"minUpper"`
	// (default true) Include numeric characters in random
	// string.
	Number pulumi.BoolInput `pulumi:"number"`
	// Supply your own list of special characters to
	// use for string generation.  This overrides the default character list in the special
	// argument.  The special argument must still be set to true for any overwritten
	// characters to be used in generation.
	OverrideSpecial pulumi.StringInput `pulumi:"overrideSpecial"`
	// (default true) Include special characters in random
	// string. These are `!@#$%&*()-_=+[]{}<>:?`
	Special pulumi.BoolInput `pulumi:"special"`
	// (default true) Include uppercase alphabet characters
	// in random string.
	Upper pulumi.BoolInput `pulumi:"upper"`
}
