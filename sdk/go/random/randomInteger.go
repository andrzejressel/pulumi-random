// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package random

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The resource `.RandomInteger` generates random values from a given range, described by the `min` and `max` attributes of a given resource.
// 
// This resource can be used in conjunction with resources that have
// the `createBeforeDestroy` lifecycle flag set, to avoid conflicts with
// unique names during the brief period where both the old and new resources
// exist concurrently.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/integer.html.markdown.
type RandomInteger struct {
	pulumi.CustomResourceState

	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapOutput `pulumi:"keepers"`

	// The maximum inclusive value of the range.
	Max pulumi.IntOutput `pulumi:"max"`

	// The minimum inclusive value of the range.
	Min pulumi.IntOutput `pulumi:"min"`

	// (int) The random Integer result.
	Result pulumi.IntOutput `pulumi:"result"`

	// A custom seed to always produce the same value.
	Seed pulumi.StringOutput `pulumi:"seed"`
}

// NewRandomInteger registers a new resource with the given unique name, arguments, and options.
func NewRandomInteger(ctx *pulumi.Context,
	name string, args *RandomIntegerArgs, opts ...pulumi.ResourceOption) (*RandomInteger, error) {
	if args == nil || args.Max == nil {
		return nil, errors.New("missing required argument 'Max'")
	}
	if args == nil || args.Min == nil {
		return nil, errors.New("missing required argument 'Min'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := args.Max; i != nil { inputs["max"] = i.ToIntOutput() }
		if i := args.Min; i != nil { inputs["min"] = i.ToIntOutput() }
		if i := args.Seed; i != nil { inputs["seed"] = i.ToStringOutput() }
	}
	var resource RandomInteger
	err := ctx.RegisterResource("random:index/randomInteger:RandomInteger", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRandomInteger gets an existing RandomInteger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomInteger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RandomIntegerState, opts ...pulumi.ResourceOption) (*RandomInteger, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := state.Max; i != nil { inputs["max"] = i.ToIntOutput() }
		if i := state.Min; i != nil { inputs["min"] = i.ToIntOutput() }
		if i := state.Result; i != nil { inputs["result"] = i.ToIntOutput() }
		if i := state.Seed; i != nil { inputs["seed"] = i.ToStringOutput() }
	}
	var resource RandomInteger
	err := ctx.ReadResource("random:index/randomInteger:RandomInteger", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RandomInteger resources.
type RandomIntegerState struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapInput `pulumi:"keepers"`
	// The maximum inclusive value of the range.
	Max pulumi.IntInput `pulumi:"max"`
	// The minimum inclusive value of the range.
	Min pulumi.IntInput `pulumi:"min"`
	// (int) The random Integer result.
	Result pulumi.IntInput `pulumi:"result"`
	// A custom seed to always produce the same value.
	Seed pulumi.StringInput `pulumi:"seed"`
}

// The set of arguments for constructing a RandomInteger resource.
type RandomIntegerArgs struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapInput `pulumi:"keepers"`
	// The maximum inclusive value of the range.
	Max pulumi.IntInput `pulumi:"max"`
	// The minimum inclusive value of the range.
	Min pulumi.IntInput `pulumi:"min"`
	// A custom seed to always produce the same value.
	Seed pulumi.StringInput `pulumi:"seed"`
}
