// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package random

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The resource `.RandomPet` generates random pet names that are intended to be
// used as unique identifiers for other resources.
// 
// This resource can be used in conjunction with resources that have
// the `createBeforeDestroy` lifecycle flag set, to avoid conflicts with
// unique names during the brief period where both the old and new resources
// exist concurrently.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/pet.html.markdown.
type RandomPet struct {
	pulumi.CustomResourceState

	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapOutput `pulumi:"keepers"`

	// The length (in words) of the pet name.
	Length pulumi.IntOutput `pulumi:"length"`

	// A string to prefix the name with.
	Prefix pulumi.StringOutput `pulumi:"prefix"`

	// The character to separate words in the pet name.
	Separator pulumi.StringOutput `pulumi:"separator"`
}

// NewRandomPet registers a new resource with the given unique name, arguments, and options.
func NewRandomPet(ctx *pulumi.Context,
	name string, args *RandomPetArgs, opts ...pulumi.ResourceOption) (*RandomPet, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := args.Length; i != nil { inputs["length"] = i.ToIntOutput() }
		if i := args.Prefix; i != nil { inputs["prefix"] = i.ToStringOutput() }
		if i := args.Separator; i != nil { inputs["separator"] = i.ToStringOutput() }
	}
	var resource RandomPet
	err := ctx.RegisterResource("random:index/randomPet:RandomPet", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRandomPet gets an existing RandomPet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomPet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RandomPetState, opts ...pulumi.ResourceOption) (*RandomPet, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := state.Length; i != nil { inputs["length"] = i.ToIntOutput() }
		if i := state.Prefix; i != nil { inputs["prefix"] = i.ToStringOutput() }
		if i := state.Separator; i != nil { inputs["separator"] = i.ToStringOutput() }
	}
	var resource RandomPet
	err := ctx.ReadResource("random:index/randomPet:RandomPet", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RandomPet resources.
type RandomPetState struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapInput `pulumi:"keepers"`
	// The length (in words) of the pet name.
	Length pulumi.IntInput `pulumi:"length"`
	// A string to prefix the name with.
	Prefix pulumi.StringInput `pulumi:"prefix"`
	// The character to separate words in the pet name.
	Separator pulumi.StringInput `pulumi:"separator"`
}

// The set of arguments for constructing a RandomPet resource.
type RandomPetArgs struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapInput `pulumi:"keepers"`
	// The length (in words) of the pet name.
	Length pulumi.IntInput `pulumi:"length"`
	// A string to prefix the name with.
	Prefix pulumi.StringInput `pulumi:"prefix"`
	// The character to separate words in the pet name.
	Separator pulumi.StringInput `pulumi:"separator"`
}
