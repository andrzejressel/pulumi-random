// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package random

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The resource `.RandomUuid` generates random uuid string that is intended to be
// used as unique identifiers for other resources.
// 
// This resource uses the `hashicorp/go-uuid` to generate a UUID-formatted string
// for use with services needed a unique string identifier.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/uuid.html.markdown.
type RandomUuid struct {
	pulumi.CustomResourceState

	// Arbitrary map of values that, when changed, will
	// trigger a new uuid to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapOutput `pulumi:"keepers"`

	// The generated uuid presented in string format.
	Result pulumi.StringOutput `pulumi:"result"`
}

// NewRandomUuid registers a new resource with the given unique name, arguments, and options.
func NewRandomUuid(ctx *pulumi.Context,
	name string, args *RandomUuidArgs, opts ...pulumi.ResourceOption) (*RandomUuid, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
	}
	var resource RandomUuid
	err := ctx.RegisterResource("random:index/randomUuid:RandomUuid", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRandomUuid gets an existing RandomUuid resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomUuid(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RandomUuidState, opts ...pulumi.ResourceOption) (*RandomUuid, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Keepers; i != nil { inputs["keepers"] = i.ToMapOutput() }
		if i := state.Result; i != nil { inputs["result"] = i.ToStringOutput() }
	}
	var resource RandomUuid
	err := ctx.ReadResource("random:index/randomUuid:RandomUuid", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RandomUuid resources.
type RandomUuidState struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new uuid to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapInput `pulumi:"keepers"`
	// The generated uuid presented in string format.
	Result pulumi.StringInput `pulumi:"result"`
}

// The set of arguments for constructing a RandomUuid resource.
type RandomUuidArgs struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new uuid to be generated. See
	// the main provider documentation for more information.
	Keepers pulumi.MapInput `pulumi:"keepers"`
}
